name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, dev ]

env:
  GO_VERSION: "1.24"

jobs:
  # Quick validation for draft PRs
  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == true
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Setup development environment
        run: nix develop --command bash -c "go mod download"

      - name: Check code formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: nix develop --command go vet $(go list ./... | grep -v 'templar-cache-benchmark')

      - name: Run basic tests
        run: nix develop --command go test $(go list ./... | grep -v 'templar-cache-benchmark') -short

  # Full validation for ready PRs
  full-validation:
    name: Full PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        test-suite: [unit, security, integration]
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Setup development environment and generate code
        run: nix develop --command bash -c "go mod download && templ generate && go generate ./..."

      - name: Run golangci-lint
        if: matrix.test-suite == 'unit'
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          nix develop --command go test -v $(go list ./... | grep -v templar-cache-benchmark) -short -race -coverprofile=coverage.out
          nix develop --command go tool cover -html=coverage.out -o coverage.html

      - name: Run security tests
        if: matrix.test-suite == 'security'
        run: |
          nix develop --command go test -v -tags=security ./cmd/... -run "TestSecurity"
          nix develop --command go test -v -tags=security ./internal/server/... -run "TestSecurity"
          nix develop --command go test -v -tags=security ./internal/config/... -run "TestSecurity"

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          nix develop --command go test -v -tags=integration ./integration_tests/... -timeout=20m

      - name: Upload coverage reports
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: pr-validation

  # Build validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Setup development environment and generate code
        run: nix develop --command bash -c "go mod download && templ generate && go generate ./..."

      - name: Build application
        run: nix develop --command go build -o templar ./

      - name: Test binary
        run: |
          ./templar --help
          timeout 5s ./templar serve --port 8081 || test $? = 124

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: templar:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance regression check
  performance-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Setup development environment and generate code
        run: nix develop --command bash -c "go mod download && templ generate && go generate ./..."

      - name: Run current benchmarks
        run: |
          nix develop --command go test -bench=. -benchmem -benchtime=3s $(go list ./... | grep -v templar-cache-benchmark) > current-bench.txt

      - name: Checkout base branch
        run: |
          git checkout ${{ github.event.pull_request.base.ref }}
          nix develop --command bash -c "go mod download && templ generate && go generate ./..."

      - name: Run base benchmarks
        continue-on-error: true
        run: |
          nix develop --command go test -bench=. -benchmem -benchtime=3s $(go list ./... | grep -v templar-cache-benchmark) > base-bench.txt

      - name: Compare benchmarks
        continue-on-error: true
        run: |
          echo "=== Performance Comparison ===" > benchmark-comparison.txt
          echo "Base branch: ${{ github.event.pull_request.base.ref }}" >> benchmark-comparison.txt
          echo "PR branch: ${{ github.event.pull_request.head.ref }}" >> benchmark-comparison.txt
          echo "" >> benchmark-comparison.txt
          echo "Current benchmarks:" >> benchmark-comparison.txt
          cat current-bench.txt >> benchmark-comparison.txt
          echo "" >> benchmark-comparison.txt
          echo "Base benchmarks:" >> benchmark-comparison.txt
          cat base-bench.txt >> benchmark-comparison.txt

      - name: Upload benchmark comparison
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-comparison-pr-${{ github.event.number }}
          path: benchmark-comparison.txt

  # Security scan for PRs
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Setup development environment and run vulnerability scan
        run: nix develop --command bash -c "go install golang.org/x/vuln/cmd/govulncheck@v1.1.3 && \$(go env GOPATH)/bin/govulncheck \$(go list ./... | grep -v templar-cache-benchmark)"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'repo'
          format: 'table'

  # Check for breaking changes
  breaking-changes:
    name: Breaking Changes Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check for API changes
        run: |
          echo "Checking for potential breaking changes..."
          
          # Check if public APIs have changed
          git diff ${{ github.event.pull_request.base.sha }} -- '*.go' | grep -E '^[-+].*func.*\(' || true
          
          # Check for removed files
          git diff --name-status ${{ github.event.pull_request.base.sha }} | grep '^D' || true
          
          # Check for moved files
          git diff --name-status ${{ github.event.pull_request.base.sha }} | grep '^R' || true

      - name: Check go.mod changes
        run: |
          if git diff --name-only ${{ github.event.pull_request.base.sha }} | grep -q "go.mod"; then
            echo "go.mod has changed. Reviewing dependency changes:"
            git diff ${{ github.event.pull_request.base.sha }} go.mod
          fi

  # Documentation check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4

      - name: Check for documentation updates
        run: |
          # Check if code changes require documentation updates
          if git diff --name-only ${{ github.event.pull_request.base.sha }} | grep -E '\.(go|templ)$' >/dev/null; then
            echo "Code changes detected. Checking for documentation updates..."
            
            if ! git diff --name-only ${{ github.event.pull_request.base.sha }} | grep -E '\.(md|txt)$' >/dev/null; then
              echo "⚠️ Code changes detected but no documentation updates found."
              echo "Consider updating documentation if needed."
            else
              echo "✅ Documentation updates found."
            fi
          fi

      - name: Check README
        run: |
          if [ -f README.md ]; then
            echo "✅ README.md exists"
          else
            echo "⚠️ README.md not found"
          fi

      - name: Check CLAUDE.md
        run: |
          if [ -f CLAUDE.md ]; then
            echo "✅ CLAUDE.md exists"
          else
            echo "⚠️ CLAUDE.md not found"
          fi

  # Final PR status
  pr-validation-complete:
    name: PR Validation Complete
    runs-on: ubuntu-latest
    needs: [full-validation, build-validation, performance-check, security-scan, breaking-changes, docs-check]
    if: github.event.pull_request.draft == false
    steps:
      - name: PR validation summary
        run: |
          echo "## 🎉 Pull Request Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All validation checks have passed for this pull request:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests**: All unit tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Tests**: Security validation completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: Integration tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Validation**: Application builds successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Check**: Benchmark comparison completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: Vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Breaking Changes**: API compatibility checked" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: Documentation review completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR #${{ github.event.number }}** is ready for review! 🚀" >> $GITHUB_STEP_SUMMARY