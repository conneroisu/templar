name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  GO_VERSION: "1.24"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Phase 1: Code Quality and Linting
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Verify go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.62.2
          args: --timeout=5m

      - name: Check code formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Check for security vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@v1.1.3
          govulncheck ./...

  # Phase 2: Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Generate Go code (templ)
        run: |
          go install github.com/a-h/templ/cmd/templ@v0.3.819
          go generate ./...

      - name: Run security tests
        run: |
          go test -v -tags=security ./cmd/... \
            -run "TestSecurity" \
            -timeout=10m \
            -coverprofile=security-coverage.out

      - name: Run server security tests
        run: |
          go test -v -tags=security ./internal/server/... \
            -run "TestSecurity" \
            -timeout=10m

      - name: Run config security tests
        run: |
          go test -v -tags=security ./internal/config/... \
            -run "TestSecurity" \
            -timeout=10m

      - name: Upload security test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./security-coverage.out
          flags: security-tests

  # Phase 3: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        go-version: ["1.23", "1.24"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Generate Go code (templ)
        run: |
          go install github.com/a-h/templ/cmd/templ@v0.3.819
          go generate ./...

      - name: Run unit tests
        run: |
          go test -v ./... \
            -short \
            -race \
            -coverprofile=coverage.out \
            -covermode=atomic \
            -timeout=15m

      - name: Upload test coverage
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unit-tests

  # Phase 4: Performance Benchmarks
  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Generate Go code (templ)
        run: |
          go install github.com/a-h/templ/cmd/templ@v0.3.819
          go generate ./...

      - name: Run scanner benchmarks
        run: |
          go test -bench=BenchmarkComponentScanner -benchmem -benchtime=5s \
            ./internal/scanner/... > scanner-bench.txt

      - name: Run build pipeline benchmarks
        run: |
          go test -bench=BenchmarkBuildPipeline -benchmem -benchtime=5s \
            ./internal/build/... > build-bench.txt

      - name: Run WebSocket benchmarks
        run: |
          go test -bench=BenchmarkWebSocket -benchmem -benchtime=5s \
            ./internal/server/... > websocket-bench.txt

      - name: Run watcher benchmarks
        run: |
          go test -bench=BenchmarkFileWatcher -benchmem -benchtime=5s \
            ./internal/watcher/... > watcher-bench.txt

      - name: Compare benchmarks with baseline
        continue-on-error: true
        run: |
          echo "Scanner Benchmarks:"
          cat scanner-bench.txt
          echo -e "\nBuild Pipeline Benchmarks:"
          cat build-bench.txt
          echo -e "\nWebSocket Benchmarks:"
          cat websocket-bench.txt
          echo -e "\nWatcher Benchmarks:"
          cat watcher-bench.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: |
            *-bench.txt

  # Phase 5: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: templar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Generate Go code (templ)
        run: |
          go install github.com/a-h/templ/cmd/templ@v0.3.819
          go generate ./...

      - name: Run scanner-registry integration tests
        run: |
          go test -v -tags=integration ./integration_tests/... \
            -run "TestIntegration_ScannerRegistry" \
            -timeout=20m

      - name: Run watcher-scanner integration tests
        run: |
          go test -v -tags=integration ./integration_tests/... \
            -run "TestIntegration_WatcherScanner" \
            -timeout=20m

      - name: Run server-WebSocket integration tests
        run: |
          go test -v -tags=integration ./integration_tests/... \
            -run "TestIntegration_ServerWebSocket" \
            -timeout=20m

      - name: Run end-to-end workflow tests
        run: |
          go test -v -tags=integration ./integration_tests/... \
            -run "TestE2E" \
            -timeout=30m

  # Phase 6: Build and Docker
  build-and-docker:
    name: Build and Docker
    runs-on: ubuntu-latest
    needs: [security-tests, unit-tests]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Generate Go code (templ)
        run: |
          go install github.com/a-h/templ/cmd/templ@v0.3.819
          go generate ./...

      - name: Build application
        run: |
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo \
            -ldflags '-extldflags "-static"' \
            -o templar ./

      - name: Run basic smoke test
        run: |
          ./templar --help
          timeout 5s ./templar serve --port 8081 || test $? = 124

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Phase 7: End-to-End System Tests
  e2e-system-tests:
    name: E2E System Tests
    runs-on: ubuntu-latest
    needs: build-and-docker
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Generate Go code (templ)
        run: |
          go install github.com/a-h/templ/cmd/templ@v0.3.819
          go generate ./...

      - name: Build application for E2E tests
        run: |
          go build -o templar ./

      - name: Set up test project
        run: |
          mkdir -p e2e-test/components
          cp -r test-project/* e2e-test/ || true
          cd e2e-test
          echo 'module e2e-test

          go 1.24

          require github.com/a-h/templ v0.2.543' > go.mod

      - name: Run E2E performance tests
        run: |
          go test -v -tags=integration ./integration_tests/... \
            -run "TestE2E_PerformanceUnderLoad" \
            -timeout=45m

      - name: Run E2E error recovery tests
        run: |
          go test -v -tags=integration ./integration_tests/... \
            -run "TestE2E_ErrorRecoveryWorkflow" \
            -timeout=30m

      - name: Run E2E multi-component tests
        run: |
          go test -v -tags=integration ./integration_tests/... \
            -run "TestE2E_MultiComponentInteractions" \
            -timeout=30m

  # Phase 8: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-docker
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'repo'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Phase 9: Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, e2e-system-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Validate deployment readiness
        run: |
          echo "✅ All tests passed"
          echo "✅ Security scans completed"
          echo "✅ Performance benchmarks completed"
          echo "✅ Integration tests passed"
          echo "✅ E2E tests passed"
          echo "🚀 Ready for deployment"

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Quality Gates Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality and linting" >> $GITHUB_STEP_SUMMARY
          echo "- Security tests and vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests across multiple Go versions and platforms" >> $GITHUB_STEP_SUMMARY
          echo "- Performance benchmarks within acceptable thresholds" >> $GITHUB_STEP_SUMMARY
          echo "- Integration tests for all major components" >> $GITHUB_STEP_SUMMARY
          echo "- End-to-end system tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ✅ Command injection, path traversal, WebSocket security" >> $GITHUB_STEP_SUMMARY
          echo "- Performance: ✅ Scanner, build pipeline, WebSocket, watcher benchmarks" >> $GITHUB_STEP_SUMMARY
          echo "- Integration: ✅ Scanner-registry, watcher-scanner, server-WebSocket, E2E" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for deployment** 🎉" >> $GITHUB_STEP_SUMMARY

  # Notification job for failures
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-tests, unit-tests, integration-tests, build-and-docker]
    if: failure()
    steps:
      - name: Create failure summary
        run: |
          echo "## ❌ CI/CD Pipeline Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "One or more critical jobs failed. Please check the following:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Failed Jobs:" >> $GITHUB_STEP_SUMMARY
          echo "- Check individual job logs for detailed error information" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all tests pass locally before pushing" >> $GITHUB_STEP_SUMMARY
          echo "- Verify security tests are not failing due to new vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY