# Golangci-lint configuration for Templar
# Optimized for performance, accuracy, and maintainability
# 
# Performance optimizations:
# - Path-based exclusions processed first (most efficient)
# - Regex patterns optimized for speed
# - Reduced false positives through granular exclusions
# - Limited enabled linters to essential ones

run:
  timeout: 5m
  tests: true
  skip-dirs:
    - vendor           # Third-party dependencies
    - node_modules     # Frontend dependencies  
    - .git            # Version control
  skip-files:
    - ".*\\.pb\\.go$"     # Protobuf generated files
    - ".*_templ\\.go$"    # Templ generated files

# Essential linters for code quality without noise
linters:
  enable:
    - errcheck      # Critical: unhandled errors can cause runtime issues
    - staticcheck   # Comprehensive static analysis for bug detection
    - govet         # Official Go static analysis (fast and reliable)
    - ineffassign   # Dead code detection
  disable:
    - gocognit      # Cognitive complexity - too subjective for this codebase
    - goconst       # Repeated strings often legitimate in tests/examples
    - gocyclo       # Cyclomatic complexity - covered by other checks
    - gosec         # Security linter - conflicts with test patterns

# Linter-specific settings for accuracy
linters-settings:
  errcheck:
    check-type-assertions: false  # Type assertions in tests are often safe
    check-blank: false           # Assignment to _ is intentional
    exclude-functions:           # Functions where errors can be safely ignored
      - fmt.Print
      - fmt.Printf
      - fmt.Println
      
  govet:
    check-shadowing: false       # Variable shadowing acceptable in limited scopes
    
  staticcheck:
    checks: ["all"]              # Enable all staticcheck rules

# Optimized exclusion rules for performance and accuracy
issues:
  exclude-use-default: false    # Explicit exclusions for transparency
  
  # Path-based exclusions (processed first - most efficient)
  exclude-rules:
    # Test files: Prioritize readability and test patterns over strict error handling
    - path: "_test\\.go$"
      linters: ["errcheck"]
      text: "Error return value.*is not checked"
      
    # Benchmark tests: Performance-focused code with different error handling needs
    - path: "_bench_test\\.go$"
      linters: ["errcheck", "staticcheck"]
      
    # Fuzz tests: Intentionally trigger edge cases and errors
    - path: "_fuzz_test\\.go$"
      linters: ["errcheck", "staticcheck"]
      
    # Testing utilities: Designed for test convenience, not production robustness
    - path: "internal/testing/"
      linters: ["errcheck", "staticcheck"]
      
    # Example code: Prioritize simplicity and educational value
    - path: "examples/"
      linters: ["errcheck"]
      
    # Integration tests: Test-specific patterns and setup code
    - path: "integration_tests/"
      linters: ["errcheck"]
      
    # CLI commands: Often use defer for cleanup where errors are acceptable
    - path: "cmd/"
      linters: ["errcheck"]
      text: "Error return value.*(Close|Stop|Shutdown).*is not checked"

  # Pattern-based exclusions (processed after path exclusions)
  exclude:
    # Defer cleanup patterns - typically safe to ignore in most contexts
    - "Error return value of .*(Close|Flush|Remove|Stop|Write|Start|Build|Shutdown) is not checked"
    
    # Output functions - print errors rarely require handling in tests/examples
    - "Error return value of .*fmt\\.(Fprint|Print|Sprint).* is not checked"
    
    # Test environment setup - configuration errors in tests are often non-critical
    - "Error return value of .*(os\\.(Setenv|Unsetenv|Chdir)|viper\\.BindEnv|filepath\\.Walk) is not checked"
    
    # Test utility functions - designed to be called without error checking
    - "Error return value of .*\\.(ShouldFail|NotifyError|Reset|ScanDirectory) is not checked"
    
    # Staticcheck rules that are overly strict for this codebase:
    
    # Empty branches in error handling are often intentional (logging, future extension points)
    - "SA9003: empty branch"
    
    # Sync.Pool legitimately uses value types for performance
    - "SA6002: argument should be pointer-like"
    
    # Defensive programming patterns that are never true by design
    - "SA4023: this comparison is never true"
    
    # Interface satisfaction checks using type assertions
    - "S1040: type assertion to the same type"
    
    # String formatting for consistency and future-proofing
    - "S1039: unnecessary use of fmt\\.Sprintf"
    
    # Explicit conditionals for code clarity over brevity
    - "S1008: should use 'return.*' instead"
    
    # Builder patterns where append result isn't always used
    - "SA4010: this result of append is never used"
    
    # Complex loop structures with labeled breaks
    - "SA4011: ineffective break statement"
    
    # Defensive nil checks for robustness
    - "S1031: unnecessary nil check around range"
    
    # Explicit boolean logic for readability
    - "QF1001: could apply De Morgan's law"

  # Performance and output settings
  max-issues-per-linter: 50     # Comprehensive reporting without spam
  max-same-issues: 5            # Avoid repetitive similar issues
  new-from-rev: ""              # Check all code, not just diffs