# Golangci-lint configuration for Templar
# Optimized for performance, accuracy, and maintainability
# See https://golangci-lint.run/usage/configuration/ for details

version: 2

run:
  timeout: 5m
  tests: true
  skip-dirs:
    - vendor
    - node_modules
    - .git
  skip-files:
    - ".*\\.pb\\.go$"          # Skip protobuf generated files
    - ".*_templ\\.go$"         # Skip templ generated files

# Configure individual linters
linters:
  enable:
    - errcheck      # Check for unchecked errors
    - staticcheck   # Comprehensive static analysis
    - govet         # Official Go tool for static analysis
    - ineffassign   # Detect ineffectual assignments
    - typecheck     # Type checker
    - unused        # Find unused constants, variables, functions and types
    - gosimple      # Suggest code simplifications
  disable:
    - gocognit      # Cognitive complexity - too noisy for this project
    - goconst       # Repeated strings - legitimate cases in tests
    - gocyclo       # Cyclomatic complexity - covered by gocognit
    - gosec         # Security checker - conflicts with testing patterns

# Linter-specific settings for better accuracy
linters-settings:
  errcheck:
    check-type-assertions: false     # Don't check type assertions in tests
    check-blank: false              # Don't check assignment to blank identifier
    exclude-functions:              # Functions where unchecked errors are acceptable
      - fmt.Print
      - fmt.Printf
      - fmt.Println
      - fmt.Fprint
      - fmt.Fprintf
      - fmt.Fprintln
      
  govet:
    check-shadowing: false          # Variable shadowing is acceptable in limited scopes
    settings:
      printf:
        funcs:
          - (github.com/sirupsen/logrus.FieldLogger).Infof
          - (github.com/sirupsen/logrus.FieldLogger).Warnf
          - (github.com/sirupsen/logrus.FieldLogger).Errorf
          - (github.com/sirupsen/logrus.FieldLogger).Fatalf
          
  staticcheck:
    checks: ["all", "-SA1019"]      # All checks except deprecation warnings

  gosimple:
    checks: ["all"]

# Issue exclusion rules for better accuracy and performance
issues:
  exclude-use-default: false       # Don't use default exclusions - be explicit
  
  # Path-based exclusions (most efficient - processed first)
  exclude-rules:
    # Test files - allow more flexible error handling
    - path: "_test\\.go$"
      linters: ["errcheck", "gosec"]
      text: "Error return value.*is not checked"
      
    # Test utilities and mocks - allow unchecked errors
    - path: "internal/testing/"
      linters: ["errcheck", "staticcheck"]
      
    # Example code - prioritize readability over strict error checking
    - path: "examples/"
      linters: ["errcheck", "staticcheck"]
      
    # Integration tests - allow test-specific patterns
    - path: "integration_tests/"
      linters: ["errcheck"]
      text: "Error return value.*is not checked"
      
    # Command packages - defer statements in cleanup often acceptable
    - path: "cmd/"
      linters: ["errcheck"]
      text: "Error return value.*is not checked"
      
    # Benchmark tests - performance tests have different error handling needs
    - path: "_bench_test\\.go$"
      linters: ["errcheck"]
      
    # Fuzzing tests - intentionally trigger edge cases
    - path: "_fuzz_test\\.go$" 
      linters: ["errcheck", "staticcheck"]

  # Text pattern exclusions (processed after path exclusions)
  exclude:
    # Defer cleanup functions - typically safe to ignore errors
    - "Error return value of .*(Close|Flush|Remove|Stop|Write|Start|Build|Shutdown) is not checked"
    
    # Print functions - output errors rarely actionable in tests/examples
    - "Error return value of .*fmt\\.(Fprint|Print|Sprint).* is not checked"
    
    # Environment and configuration setup - test fixtures
    - "Error return value of .*(os\\.(Setenv|Unsetenv|Chdir)|viper\\.BindEnv|filepath\\.Walk) is not checked"
    
    # Test utility functions - designed to be called without error checking
    - "Error return value of .*\\.(ShouldFail|NotifyError|Reset) is not checked"
    
    # Staticcheck rules that are overly strict for this codebase
    - "SA9003: empty branch"                    # Empty branches in error handling are intentional
    - "SA6002: argument should be pointer-like" # Sync.Pool patterns legitimately use value types
    - "SA4023: this comparison is never true"   # Defensive programming patterns
    - "S1040: type assertion to the same type"  # Interface satisfaction checks
    - "S1039: unnecessary use of fmt\\.Sprintf" # String formatting for consistency
    - "S1008: should use 'return.*' instead"    # Explicit conditionals for clarity
    - "SA4010: this result of append is never used" # Builder patterns
    - "SA4011: ineffective break statement"     # Label breaks in complex loops
    - "S1031: unnecessary nil check around range" # Defensive programming
    - "QF1001: could apply De Morgan's law"     # Explicit logic for readability

  # Performance settings
  max-issues-per-linter: 50        # Increased limit for comprehensive reporting
  max-same-issues: 5               # Avoid spam from repeated patterns
  new-from-rev: ""                 # Check all code, not just changes
  
  # Exclude entire files if needed (rare cases)
  exclude-files: []